S -> 
    Define S | Assign S | UnaryExp S | Print S | Comment S | If S | While S | for S
    Define | Assign | UnaryExp | Print | Comment | If | While | for


Block -> 
    Assign Block | UnaryExp Block | Print Block | Comment Block | If Block | While Block | for Block
    Assign | UnaryExp | Print | Comment | If | While | for


Define -> 
	"int"  Variable ";" |
	"bool" Variable ";" |
	"float" Variable ";" |
	"char" Variable ";" |
	"string" Variable ";" |
	"array" Variable ";"


Variable ->
	Identifier_A |
	Identifier_A "=" Value |
	Identifier_A "," Variable |
	Identifier_A "=" Value "," Variable


Digit ->
	0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9


Number_A ->
	Number_B |
	"-" Number_B |
    "+" Number_B


Number_B ->
	Digit |
	Digit Number_B


Boolean ->
	true |
	false


Identifier_A ->
	Alphabet |
	Alphabet Identifier_B


Identifier_B ->
	Digit |
	Alphabet | 
	Digit Identifier_B |
	Alphabet Identifier_B
    

Print ->
	"print(" Identifier_A ");"


Comment ->
	"/*" CommentBody


CommentBody ->
	"*/"
	Digit CommentBody |
	Alphabet CommentBody |


Assign -> Identifier_A AssignOperation Value ";"


AssignOperation -> "-=" | "+=" | "*=" | "/=" | "="


Value -> LogicalValue | ArithmeticValue


ArithmeticValue ->
    ArithmeticValue "+" Term |
    ArithmeticValue "-" Term | 
    Term


Term -> Term "*" Power |
        Term "%" Power |
        Term "/" Power | Power


Power -> Power "^" Factor | Factor


Factor -> Identifier_A | Number_A | "(" ArithmeticValue ")" | "-(" ArithmeticValue ")" | "+(" ArithmeticValue ")" 


CompareOperation -> ">" | "<" | ">=" | "<=" | "=="


logicalValue -> 
    "(" logicalValue ")" |
    "true" |
    "false" |
    ArithmeticValue CompareOperation ArithmeticValue |
    logicalValue "and" logicalValue |
    logicalValue "or" logicalValue |
    Identifier_A


Unary ->
    Identifier_A "++" |
    Identifier_A "--"

    
UnaryExp ->
    Unary ";"


If ->
    "if" "(" logicalValue ")" "{" Block "}" |
    "if" "(" logicalValue ")" "{" Block "}" Else
    
    "if" "(" logicalValue ")" "{" "}" |
    "if" "(" logicalValue ")" "{" "}" Else |
    

Else ->
    "else" If | 
    "else" "{" Block "}" |
    "else" "{" "}"


While ->
	"while" "(" logicalValue ")" "{" Block "}" |
	"while" "(" logicalValue ")" "{" "}"


For ->
	"for" "(" ForInitialization ";" ForCondition ";" ForUpdate ")" "{" Block "}" |
	"for" "(" ForInitialization ";" ForCondition ";" ForUpdate ")" "{" "}"


ForInitialization ->
	Identifier_A "=" ArithmeticValue


ForCondition ->
	logicalValue


ForUpdate ->
	Unary |
	Identifier_A AssignOperation Value
    
